ssh_proxy(){
L_PROXY=$1
R_USER=$2
R_HOST=$3
        ssh -L ${L_PROXY}:127.0.0.1:${L_PROXY} -N -f ${R_USER}@${R_HOST}
if [ $? == 1 ];then
        echo "ssh_proxy [remote password ssh] 1080 oniversal localhost"
fi
}
oss_firewall() {
case $1 in
       'proxy')
       echo "proxy"
       ;;
        'wifi')
        Accept_wifi_inf
        redirect_http_https
        echo "accept wifi and redirect 80 - 443"
        ;;
        *)
        oss_firewall_acceptall
       ;;
esac
}

oss_firewall_acceptall() {
DNS_accept
echo "DNS_accept"
HTTPS_accept
echo "HTTPS_accept"
Accept_local
echo "Accept_local"
Accept_lo_inf
echo "Accept_lo_inf"
Accept_wifi_inf
echo "Accept_wifi_inf"
Allow_SSH
echo "Allow_SSH"
}

redirect_http_https(){
iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 443
}

Accept_wifi_inf() {
iptables -A INPUT -i wlan0 -j ACCEPT -m comment --comment "wlan INPUT"
iptables -A OUTPUT -o wlan0 -j ACCEPT -m comment --comment "wlan OUTPUT"
}

DNS_accept() {
iptables -A INPUT -i "$(uci get network.wan.ifname)" -p udp --sport 53 -j ACCEPT
iptables -A OUTPUT -o "$(uci get network.wan.ifname)" -p udp --dport 53 -j ACCEPT
iptables -A INPUT -i "$(uci get network.wan.ifname)" -p tcp --sport 53 -j ACCEPT
iptables -A OUTPUT -o "$(uci get network.wan.ifname)" -p tcp --dport 53 -j ACCEPT
iptables -A FORWARD -p udp --sport 53 -j ACCEPT
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p tcp --sport 53 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT
iptables -t nat -I POSTROUTING -o "$(uci get network.wan.ifname)" -j MASQUERADE
iptables -I INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
}

HTTPS_accept() {
iptables -A INPUT -j ACCEPT -p tcp --dport 443
iptables -A OUTPUT -j ACCEPT -p tcp --sport 443
iptables -A FORWARD -j ACCEPT -p tcp --sport 443
iptables -A FORWARD -j ACCEPT -p tcp --dport 443
}

Accept_local() {
iptables -A INPUT -s 192.168.1.0/24 -j ACCEPT
iptables -A OUTPUT -d 192.168.1.0/24 -j ACCEPT
iptables -A FORWARD -d 192.168.1.0/24 -j ACCEPT
}

Accept_lo_inf() {

iptables -A INPUT -i lo -j ACCEPT -m comment --comment "lo INPUT"
iptables -A OUTPUT -o lo -j ACCEPT -m comment --comment "lo OUTPUT"

}

Allow_SSH() {
iptables -I INPUT -p tcp --dport 22 -j ACCEPT -m comment --comment "inSSH dport"
iptables -I INPUT -p tcp --sport 22 -j ACCEPT -m comment --comment "inSSH sport"
iptables -I OUTPUT -p tcp --sport 22 -j ACCEPT -m comment --comment "outSSH sport"
iptables -I OUTPUT -p tcp --dport 22 -j ACCEPT -m comment --comment "outSSH dport"

}
ssh_proxy(){
SOCKS=$1
L_PROXY=$2
R_USER=$3
R_HOST=$4
sshpass -p "$1" ssh -L ${L_PROXY}:127.0.0.1:${L_PROXY} -N -f ${R_USER}@${R_HOST}
if [ $? == 1 ];then
echo "ssh_proxy [remote password ssh] 1080 oniversal oniversal.duckdns.org" 
fi
}

initialize() {
        local ColorMode="c"
        if [ ! -z "$REQUEST_METHOD" ]; then
                HTML="1"
                ColorMode="html"
                StartRuler=""
                EndRuler="0"
        fi
        [ -e /etc/web.banner ] && Width=$(awk 'BEGIN{max=0}{if(length($0)>max)max=length($0)}END{print max}' /etc/banner 2>/dev/null)
        while [ -n "$1" ]; do
                case "$1" in
                -h|--help)      echo -e "Usage: $0 [-h|--help] [[-m|--mono]|[-bw|-black-white]|[-c2|--color-2]] [-sr|--no-start-ruler] [-er|--no-end-ruler]"\
                                                        "[-w N|--width N] [-en Name|--extra-name Name] [-ev Value|--extra-value Value] [-le|--no-last-err]"\
                                                        "\n\t-h\t\tThis help,"\
                                                        "\n\t-m\t\tDisplay mono version,"\
                                                        "\n\t-bw\t\tDisplay black-white version,"\
                                                        "\n\t-c2\t\tDisplay alternative color version 2,"\
                                                        "\n\t-sr\t\tWithout start horizontal ruler,"\
                                                        "\n\t-er\t\tWithout end horizontal ruler,"\
                                                        "\n\t-w N\t\tSet width of text area to N characters (minimum 60)"\
                                                        "\n\t-en Name\tPrint extra name"\
                                                        "\n\t-ev Value\tPrint extra value"\
                                                        "\n\t-le\t\tDon't display last errors"
                                        exit 1;;
                -m|--mono) ColorMode="m";;
                -bw|--black-white) ColorMode="bw";;
                -c2|--color-2) ColorMode="c2";;
                -sr|--no-start-ruler) StartRuler="0";;
                -er|--no-end-ruler) EndRuler="0";;
                -w|--width) shift; Width=$1;;
                -en|--extra-name)       while [ -n "$2" ] && [ "${2:0:1}" != "-" ]; do
                                                                shift
                                                                [ "$ExtraName" != "" ] && ExtraName="$ExtraName "
                                                                ExtraName="$ExtraName$1"
                                                        done;;
                -ev|--extra-value)      while [ -n "$2" ] && [ "${2:0:1}" != "-" ]; do
                                                                shift
                                                                [ "$ExtraValue" != "" ] && ExtraValue="$ExtraValue "
                                                                ExtraValue="$ExtraValue$1"
                                                        done;;
                -le|--no-last-err)      LastErrors="0";;
                *) echo "Invalid option: $1. Use -h for help";;
                esac
                shift;
        done
        case "$ColorMode" in
                c)      NormalColor="\e[0m"
                        MachineColor="\e[0;33m"
                        ValueColor="\e[1;36m"
                        AddrColor="\e[1;31m"
                        RXTXColor="\e[2;32m"
                        ErrorColor="\e[0;31m";;
                c2)     NormalColor="\e[0m"
                        MachineColor="\e[0;31m"
                        ValueColor="\e[0;33m"
                        AddrColor="\e[0;35m"
                        RXTXColor="\e[0;36m"
                        ErrorColor="\e[0;31m";;
                m)      NormalColor="\e[0m"
                        MachineColor="\e[7m"
                        ValueColor="\e[1m"
                        AddrColor="\e[4m"
                        RXTXColor="\e[1m"
                        ErrorColor="\e[4";;
                html)   NormalColor="</font><font class=\"Normal\">"
                        MachineColor="</font><font class=\"Machine\">"
                        ValueColor="</font><font class=\"Value\">"
                        AddrColor="</font><font class=\"Addr\">"
                        RXTXColor="</font><font class=\"RXTX\">"
                        ErrorColor="</font><font class=\"Error\">";;
                *)      ;;
        esac
        ([ "$Width" == "" ] || [ "$Width" -lt 50 ]) && Width=20
        if [ "$HTML" == "1" ]; then
        [ -e /etc/web.banner ] && cat /etc/web.banner
        fi
}
finalize() {
        if [ "$HTML" == "1" ]; then
                cat << EOF

EOF
        fi
}

human_readable() { # <Number of bytes>
        if [ $1 -gt 0 ]; then
                printf "$(awk -v n=$1 'BEGIN{for(i=split("B KB MB GB TB PB",suffix);s<1;i--)s=n/(2**(10*i));printf (int(s)==s)?"%.0f%s":"%.1f%s",s,suffix[i+2]}' 2>/dev/null)"
        else
                printf "0B"
        fi
}

device_rx_tx() { # <Device>
        local RXTX=$(awk -v Device=$1 '$1==Device ":"{printf "%.0f\t%.0f",$2,$10}' /proc/net/dev 2>/dev/null)
        [ "$RXTX" != "" ] && printf ", rx/tx: $RXTXColor$(human_readable $(echo "$RXTX" | cut -f 1))$NormalColor/$RXTXColor$(human_readable $(echo "$RXTX" | cut -f 2))$NormalColor"
}

uptime_str() { # <Time in Seconds>
        local Uptime=$1
        if [ $Uptime -gt 0 ]; then
                local Days=$(expr $Uptime / 60 / 60 / 24)
                local Hours=$(expr $Uptime / 60 / 60 % 24)
                local Minutes=$(expr $Uptime / 60 % 60)
                local Seconds=$(expr $Uptime % 60)
                if [ $Days -gt 0 ]; then
                        Days=$(printf "%dd " $Days)
                else
                        Days=""
                fi 2>/dev/null
                printf "$Days%02d:%02d:%02d" $Hours $Minutes $Seconds
        fi
}

print_line() { # <String to Print>, [[<String to Print>] ...]
        local Line="$@"
        if [ "$HTML" == "1" ]; then
                printf "" 2>/dev/null
        else
                printf " | %-$(expr $Width - 5)s |\r | $Line\n" 2>/dev/null
        fi
}

print_horizontal_ruler() {
        printf "/%$(expr $Width - 1)s\n" | tr ' /' '- ' 2>/dev/null
}

print_machine() {
        local Machine=""
        local HostName=$(uci -q get system.@system[0].hostname)
        if [ -e /tmp/sysinfo/model ]; then
                Machine=$(cat /tmp/sysinfo/model 2>/dev/null)
        elif [ -e /proc/cpuinfo ]; then
                Machine=$(awk 'BEGIN{FS="[ \t]+:[ \t]";OFS=""}/machine/{Machine=$2}/Hardware/{Hardware=$2}END{print Machine,(Machine!="" && Hardware!="")?" ":"",Hardware}' /proc/cpuinfo 2>/dev/null)
        fi
        print_line "${NormalColor}Machine: $MachineColor${Machine:-n/a}$NormalColor,"\
                        "Name: $MachineColor${HostName:-n/a}$NormalColor"
}

print_times() {
        local SysUptime=$(cut -d. -f1 /proc/uptime)
        local Uptime=$(uptime_str $SysUptime)
        local Now=$(date +'%Y-%m-%d %H:%M:%S')
        print_line "System uptime: $ValueColor$Uptime$NormalColor,"\
                                "Now: $ValueColor$Now$NormalColor"
}

print_loadavg() {
        print_line "System load:"\
                                "$ValueColor"$(cat /proc/loadavg | cut -d " " -f 1 2>/dev/null)"$NormalColor,"\
                                "$ValueColor"$(cat /proc/loadavg | cut -d " " -f 2 2>/dev/null)"$NormalColor,"\
                                "$ValueColor"$(cat /proc/loadavg | cut -d " " -f 3 2>/dev/null)"$NormalColor"
}

print_fs_summary() { # <Mount point> <Label>
        local DeviceInfo=$(df -k $1 2>/dev/null| awk 'BEGIN{Total=0;Free=0} NR>1 && $6=="'$1'"{Total=$2;Free=$4}END{Used=Total-Free;printf"%.0f\t%.0f\t%.1f\t%.0f",Total*1024,Used*1024,(Total>0)?((Used/Total)*100):0,Free*1024}' 2>/dev/null)
        local Total=$(echo "$DeviceInfo" | cut -f 1)
        local Used=$(echo "$DeviceInfo" | cut -f 2)
        local UsedPercent=$(echo "$DeviceInfo" | cut -f 3)
        local Free=$(echo "$DeviceInfo" | cut -f 4)
        [ "$Total" -gt 0 ] && print_line "$2:"\
                                "total: $ValueColor$(human_readable $Total)$NormalColor,"\
                                "used: $ValueColor$(human_readable $Used)$NormalColor, $ValueColor$UsedPercent$NormalColor%%,"\
                                "free: $ValueColor$(human_readable $Free)$NormalColor"
}

print_disk() {
        local Overlay=$(awk '$3=="overlayfs"{print $2}' /proc/mounts 2>/dev/null)
        if [ "$Overlay" != "" ]; then
                print_fs_summary /overlay "Flash"
        fi
        if [ "$Overlay" == "" ] || [ "$Overlay" != "/" ]; then
                print_fs_summary / "RootFS"
        fi
}

print_memory() {
        local Memory=$(awk 'BEGIN{Total=0;Free=0}$1~/^MemTotal:/{Total=$2}$1~/^MemFree:|^Buffers:|^Cached:/{Free+=$2}END{Used=Total-Free;printf"%.0f\t%.0f\t%.1f\t%.0f",Total*1024,Used*1024,(Total>0)?((Used/Total)*100):0,Free*1024}' /proc/meminfo 2>/dev/null)
        local Total=$(echo "$Memory" | cut -f 1)
        local Used=$(echo "$Memory" | cut -f 2)
        local UsedPercent=$(echo "$Memory" | cut -f 3)
        local Free=$(echo "$Memory" | cut -f 4)
        print_line "Memory:"\
                                "total: $ValueColor$(human_readable $Total)$NormalColor,"\
                                "used: $ValueColor$(human_readable $Used)$NormalColor, $ValueColor$UsedPercent$NormalColor%%,"\
                                "free: $ValueColor$(human_readable $Free)$NormalColor"
}

print_swap() {
        local Swap=$(awk 'BEGIN{Total=0;Free=0}$1~/^SwapTotal:/{Total=$2}$1~/^SwapFree:/{Free=$2}END{Used=Total-Free;printf"%.0f\t%.0f\t%.1f\t%.0f",Total*1024,Used*1024,(Total>0)?((Used/Total)*100):0,Free*1024}' /proc/meminfo 2>/dev/null)
        local Total=$(echo "$Swap" | cut -f 1)
        local Used=$(echo "$Swap" | cut -f 2)
        local UsedPercent=$(echo "$Swap" | cut -f 3)
        local Free=$(echo "$Swap" | cut -f 4)
        [ "$Total" -gt 0 ] && print_line "Swap:"\
                                "total: $ValueColor$(human_readable $Total)$NormalColor,"\
                                "used: $ValueColor$(human_readable $Used)$NormalColor, $ValueColor$UsedPercent$NormalColor%%,"\
                                "free: $ValueColor$(human_readable $Free)$NormalColor"
}
print_wlan() {
        local Iface
        for Iface in $(uci -q show wireless | grep device=radio | cut -f2 -d.); do
                local Device=$(uci -q get wireless.$Iface.device)
                local SSID=$(uci -q get wireless.$Iface.ssid)
                local IfaceDisabled=$(uci -q get wireless.$Iface.disabled)
                local DeviceDisabled=$(uci -q get wireless.$Device.disabled)
                if [ -n "$SSID" ] && [ "$IfaceDisabled" != "1" ] && [ "$DeviceDisabled" != "1" ]; then
                        local Mode=$(uci -q -P /var/state get wireless.$Iface.mode)
                        local Channel=$(uci -q get wireless.$Device.channel)
                        local RadioIface=$(uci -q -P /var/state get wireless.$Iface.ifname)
                        local Connection="Down"
                        if [ -n "$RadioIface" ]; then
                                if [ "$Mode" == "ap" ]; then
                                        Connection="$(iw dev $RadioIface station dump | grep Station | wc -l 2>/dev/null)"
                                else
                                        Connection="$(iw dev $RadioIface link | awk 'BEGIN{FS=": ";Signal="";Bitrate=""} $1~/signal/ {Signal=$2} $1~/tx bitrate/ {Bitrate=$2}END{print Signal" "Bitrate}' 2>/dev/null)"
                                fi
                        fi
                        if [ "$Mode" == "ap" ]; then
                                print_line      "WLAN: $ValueColor$SSID$NormalColor($Mode),"\
                                                        "ch: $ValueColor${Channel:-n/a}$NormalColor,"\
                                                        "conn: $ValueColor$Connection$NormalColor$(device_rx_tx $RadioIface)"
                        else
                                print_line      "WLAN: $ValueColor$SSID$NormalColor($Mode),"\
                                                        "ch: $ValueColor${Channel:-n/a}$NormalColor"
                                print_line      "conn: $ValueColor$Connection$NormalColor$(device_rx_tx $RadioIface)"
                        fi
                fi
        done
}

print_vpn() {
        local VPN
        for VPN in $(uci -q show openvpn | grep .ca= | cut -f2 -d.); do
                local Device=$(uci -q get openvpn.$VPN.dev)
                local Enabled=$(uci -q get openvpn.$VPN.enabled)
                if [ "$Enabled" == "1" ] || [ "$Enabled" == "" ]; then
                        local Mode=$(uci -q get openvpn.$VPN.mode)
                        local Connection="n/a"
                        if [ "$Mode" == "server" ]; then
                                Mode="$ValueColor$VPN$NormalColor(svr):$(uci -q get openvpn.$VPN.port)"
                                Status=$(uci -q get openvpn.$VPN.status)
                                Connection=$(awk 'BEGIN{FS=",";c=0;l=0}{if($1=="Common Name")l=1;else if($1=="ROUTING TABLE")exit;else if (l==1) c=c+1}END{print c}' $Status 2>/dev/null)
                        else
                                Mode="$ValueColor$VPN$NormalColor(cli)"
                                Connection="Down"
                                ifconfig $Device &>/dev/null && Connection="Up"
                        fi
                        print_line      "VPN: $Mode,"\
                                                "conn: $ValueColor$Connection$NormalColor$(device_rx_tx $Device)"
                fi
        done
}

print_extra() {
        ([ "$ExtraName" != "" ] || [ "$ExtraValue" != "" ]) && print_line "$ExtraName $ValueColor$ExtraValue$NormalColor"
}

print_error() {
        logread | awk '/\w{3}+\.(err|warn|alert|emerg|crit)/{err[++i]=$0}END{j=i-4;j=j>=1?j:1;while(j<=i)print" '$ErrorColor'"err[j++]"'$NormalColor'"}' 2>/dev/null
}

exroot(){
        clear
                _DEV=`block info | grep ext4 | awk -F':' '{print $1}' | cut -d'/' -f3`
                _FREE_SPACE=`df -hm | grep '/overlay' | awk '{print $4}' | tail -1`
                _STAT_EX=$(df -h | grep "$_DEV" | wc -l)
                if [ "$_STAT_EX" == 1 ];then
                echo "router sudah di exroot space = $_FREE_SPACE"
        else
                        if [ "`echo $_DEV | wc -l`" -ge '1' ];then
                        echo "preosess exroot..."
                        mount /dev/$_DEV /mnt ; tar -C /overlay -cf - . | tar -C /mnt -xf - ; umount /mnt
                        echo "selesai..."
                        block detect > /etc/config/fstab; \
                        sed -i s/option$'\t'enabled$'\t'\'0\'/option$'\t'enabled$'\t'\'1\'/ /etc/config/fstab; \
                        sed -i s#/mnt/$_DEV#/overlay# /etc/config/fstab
                        mount /dev/$_DEV /overlay
                        echo "exroot mount /dev/$_DEV"
                else
                        echo "flashdisk dengan format ext4 belum terbaca"
                fi
        fi
}

waitForHost()
{
IPADDRESS=$(ifconfig wlan0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}')
echo "Testing..."
i=0
PING_CMD="ping -t 3 -c 1 google.com > /dev/null 2>&1"

eval $PING_CMD

if [ $( echo $IPADDRESS | wc -l ) == 1 ] ; then
    echo "Already connected...."
    sleep 2
    echo "$IPADDRESS"
else
    echo -n "Waiting for connection..."

    while true; do
        i=$(($i+1))
        eval $PING_CMD
        if [[ $? -eq 0 ]]; then
            echo
            echo Connected.
            printf "Ip Address: $IPADDRESS\SSID: $scan_ssid"
            break
        else
            sleep 1
            echo -n .
            if [ $i == 10 ];then
                echo "conection time out, please restart"
                read -p "are you want to restart automatically? :" ans
                case $ans in
                        'yes')
                        reboot
                        ;;
                        'no')
                        read -p "are you want to restart network connection ? : " ans2
                        case $ans2 in
                                'yes')
                                /etc/init.d/network restart
                                ;;
                                'no')
                                break
                                ;;
                                *)
                                break
                                ;;
                        esac
                        ;;
                        *)
                        break
                        ;;
                esac
            fi
        fi
    done
fi
}

config_network(){
#---------------------------------------------------
# CONFIG NETWORK
#---------------------------------------------------
uci set network.lan.netmask='255.255.255.0'
uci set network.lan.ip6assign='60'
uci set network.wan=interface
uci set network.wan.ifname='wlan0'
uci set network.wan.proto='dhcp'
echo "NETWORK CONFIG"
#---------------------------------------------------
# CONFIG SYSTEM
#---------------------------------------------------
uci set system.@system[0]=system
uci set system.@system[0].ttylogin='0'
uci set system.@system[0].log_size='64'
uci set system.@system[0].urandom_seed='0'
uci set system.@system[0].zonename='UTC'
uci set system.@system[0].hostname='ONIVERSAL'
uci set system.@system[0].log_proto='udp'
uci set system.@system[0].conloglevel='8'
uci set system.@system[0].cronloglevel='5'
uci set system.ntp=timeserver
uci set system.led_lan=led
uci set system.led_lan.name='lan'
uci set system.led_lan.sysfs='tp-link:green:lan'
uci set system.led_lan.trigger='netdev'
uci set system.led_lan.mode='link tx rx'
uci set system.led_lan.dev='eth0'
echo "SYSTEM CONFIG"
#---------------------------------------------------
# CONFIG DHCP
#---------------------------------------------------
uci set dhcp.@dnsmasq[0]=dnsmasq
uci set dhcp.@dnsmasq[0].domainneeded='1'
uci set dhcp.@dnsmasq[0].localise_queries='1'
uci set dhcp.@dnsmasq[0].rebind_protection='1'
uci set dhcp.@dnsmasq[0].rebind_localhost='1'
uci set dhcp.@dnsmasq[0].local='/lan/'
uci set dhcp.@dnsmasq[0].domain='lan'
uci set dhcp.@dnsmasq[0].expandhosts='1'
uci set dhcp.@dnsmasq[0].authoritative='1'
uci set dhcp.@dnsmasq[0].readethers='1'
uci set dhcp.@dnsmasq[0].leasefile='/tmp/dhcp.leases'
uci set dhcp.@dnsmasq[0].localservice='1'
uci set dhcp.@dnsmasq[0].server='/oniversal.local/127.0.0.1'
uci add_list dhcp.@dnsmasq[0].server='/google.com/8.8.8.8'
uci add_list dhcp.@dnsmasq[0].server='/google.com/8.8.4.4'
uci set dhcp.lan=dhcp
uci set dhcp.lan.interface='lan'
uci set dhcp.lan.ignore='1'
uci set dhcp.wan=dhcp
uci set dhcp.wan.interface='wan'
uci set dhcp.wan.ignore='1'
uci set dhcp.odhcpd=odhcpd
uci set dhcp.odhcpd.maindhcp='0'
uci set dhcp.odhcpd.leasefile='/tmp/hosts/odhcpd'
uci set dhcp.odhcpd.leasetrigger='/usr/sbin/odhcpd-update'
uci set dhcp.odhcpd.loglevel='4'
echo "DHCP CONFIG"
uci commit
wifi up
wifi up radio0
waitForHost 10
oss_firewall
exit 0
}
config_wireless(){
case $1 in
'set')
read -p "SSID: " SSID
read -p "KEY: " KEY
;;
'web')
SSID=$2
KEY=$3
;;
esac
IW_STA_SSID="$SSID"
IW_STA_PASS="$KEY"
uci delete wireless.default_radio0
uci set wireless.radio0.disabled='0'
uci set wireless.wifinet1=wifi-iface
uci set wireless.wifinet1.ssid="$IW_STA_SSID"
uci set wireless.wifinet1.device='radio0'
uci set wireless.wifinet1.mode='sta'
uci set wireless.wifinet1.key="$IW_STA_PASS"
uci set wireless.wifinet1.network='wan'
uci set wireless.wifinet1.encryption='psk2'
uci set wireless.wifinet2=wifi-iface
uci set wireless.wifinet2.ssid='ONIVERSAL'
uci set wireless.wifinet2.encryption='psk'
uci set wireless.wifinet2.device='radio0'
uci set wireless.wifinet2.mode='ap'
uci set wireless.wifinet2.key='oniversal'
uci set wireless.wifinet2.network='lan'
echo "WIRELESS CONFIG"
uci commit wireless
config_network
}

help(){
        echo "1.) oss exroot"
        echo "2.) oss ap-sta wifi [auto]"
}

ping_test(){
IPADDRESS=$(ifconfig wlan0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}')
IP='google.com'
ping -c1 $IP > /dev/null  2>&1
if [ "$?" = 0 ]
then
  echo "internet connected"
  echo "SSID: $(scan_ssid)"
  echo "ipaddress: $IPADDRESS"
  exit 0
else
  echo "Host not found"
fi
}

base_script(){
        ping_test
        rm /etc/config/wireless > /dev/null 2>&1
        wifi config
        uci commit wireless
        sleep 5
        uci set wireless.radio0.disabled='0'
        uci commit wireless
        wifi up
        wifi up radio0
        sleep 10
case $1 in
'web')
config_wireless web $2 $3
;;
*)
                STAT="$(ifconfig | grep wlan0 | wc -l)"
                while [ ${STAT} != 0 ];do
                        help
                        read -p "masukan pilihan [1-2] :" opt
                        case $opt in
                '1')
                        exroot
                ;;
                '2')
                        echo "list:"
                                                SCAN=$(iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//')
                                                LIST=$(iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//' | wc -l)
                                                while [[ $LIST != 0 ]];do
                                                        SCAN=$(iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//')
                                                        LIST=$(iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//' | wc -l)
                                                        if [ $LIST -gt 0 ];then
                                                                echo "################"
                                                                printf "%s\n" "$SCAN"
                                                                echo "################"
                                                                LIST=$(iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//' | wc -l)
                                                                config_wireless set
                                                        else
                                                        LIST=0
                                                        echo "ulangi lagi"
                                                        fi
                                                done
                ;;
                        esac
                STAT="$(ifconfig | grep wlan0 | wc -l)"
                wifi up
                done
;;
esac
}

scan_ssid(){
SCAN=`iw wlan0 scan | grep SSID | awk -F':' '{print $2}' | sed -e 's/^\ *//'`
printf '%s<br>\n' "$SCAN"
}

get_post(){
     for qr in $QUERY_STRING
     do
          if [ "${qr%%=*}" == "$1" ];then
              echo ${qr##*=}| sed 's/+/ /g'
              break
          fi
     done
}
query_fix(){
        QUERY_STRING=$(echo $QUERY_STRING | sed 's/%3A/:/g;s/&/ /g;s/%2F/\//g; s/%2C/,/g; s/%23/#/g; s/%21/!/g; s/%0D%0A/\n/g; s/%3D/=/g; s/%5B/[/g; s/%5D/]/g; s/%22/"/g; s/%24/$/g; s/%09/        /g; s/%60/\`/g; s/%7C/\|/g; s/%7B/\{/g; s/%7D/\}/g; s/%3E/\>/g; s/%28/(/g; s/%29/)/g; s/%27/'\''/g; s/%40/@/g; s/%3A/:/g' )
}

shell(){
cat <<EOF
<pre style="overflow-x: hidden;" class="text-success">
<code>
$(initialize $@ |sed 's/|//g')
$(print_machine|sed 's/|//g')
$(print_times|sed 's/|//g')
$(print_times|sed 's/|//g')
$(print_loadavg|sed 's/|//g')
$(print_disk|sed 's/|//g')
$(print_memory|sed 's/|//g')
</code>
</pre>
EOF
}

oniversal(){

case $1 in
        'web')
        ping -c 1 8.8.8.8 > /dev/null && echo "internet berjalan baik" || config_wireless web $2 $3
        ;;
        *)
        base_script
        ;;
esac
}
_head(){
cat << EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
        <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="stylesheet" href="/css/bootstrap.min.css" crossorigin="anonymous">
                <link rel="stylesheet" href="/css/my.css" crossorigin="anonymous">
                <script src="/js/jquery-1.8.0.min.js"></script>
        </head>
<body class="text-center">
<main role="main" class="container">
        <h1 class="mt-5 text-light">ONIVERSAL OSS</h1>
        <p class="lead">
</main>
EOF
}

footer(){
cat << EOF
<div style="bottom: 0;position: absolute;width: 100%;height: 60px;line-height: 60px;color: white;" class="footer">
        <div class="container">
                <span class="text-muted">oniversal indonesia - oss (2021)</span>
        </div>
</div>
</body>
</html>
EOF
}

result(){
if [ "$(get_post scan)" == 'scan-wifi' ];then
        RES_SCAN=$(scan_ssid)
fi
if [ "$(get_post send)" == 'send' ];then
        CMD=$(get_post command)
        echo "#!/bin/sh" > /tmp/script.sh
        echo "$CMD" >> /tmp/script.sh
        sh /tmp/script.sh > /tmp/output.log
        RES_SCAN="<div style='background-color:black;' >`cat /tmp/output.log`</div>"
        echo "" > /tmp/output.log
fi
cat <<EOF
<div class="mt-n5 px-md-5 mt-5" role="group">
<div class='pre-scrollable'>
<pre class="text-left" style="max-height:180px;color:#048012;background-color:black;">$RES_SCAN</pre>
</div>
</div>
EOF

}

wifi_setting(){
cat <<EOF
        <form method='get'>
                <div class="btn-group-vertical mt-n5 px-md-5 mt-5 row" role="group">
                <div class="input-group">
                        <input type='hidden' name='gui' value='yes'></input>
                        <input style="color:#24ed3b;background-color: rgba(0, 0, 0, 0);border:none;"  placeholder='input ssid here' type='text' id='ssid' name='ssid' value="$SSID" type="email" class=" col px-md-3 form-control transparent-input" >
                        <input style="color:#24ed3b;background-color: rgba(0, 0, 0, 0);border:none;" type="password" class="form-control transparent-input col px-md-3" placeholder='input password here'  type='password' id='pass' name='pass' value="$PASSWORD" >
                </div>
                <div class="btn-group">
                        <input  class="btn btn-success btn-sm mt-0" type='submit' id='wifi-set' name='wifi-set' value='set-wifi'>
                </div>
                </div>
        </form>
EOF
}

shell_gui(){
cat <<EOF
<form id="web_shell" method='get'>
        <div class="btn-group-vertical mt-n5 px-md-5 mt-5 row" role="group">
                <div class="input-group">
                        <input type='hidden' name='gui' value='yes'></input>
                        <input style="color:#24ed3b;background-color: rgba(0, 0, 0, 0);border:none;" type="text" class="form-control transparent-input col px-md-3" placeholder='input bash script here'  type='password' name='command' >
                </div>
                <div class="btn-group">
                        <input class="btn btn-success btn-sm mt-0" type="submit" name='kirim' value='kirim'></input>
                </div>
        </div>
</form>
EOF
}
content_html(){
echo "Content-type: text/html"
echo ""
}

first_view(){
cat <<EOF
        <form method="get" action="">
                <div class="btn-group-vertical row" role="group">
                        <div class="btn-group">
                                <input name="dev-info" id="dev-info" type="submit" class="btn btn-secondary" value="Device Information">
                                </input>
                        </div>
                        <div class="btn-group">
                                <input name="openwifisetting" type="submit" class="btn" value="setting wifi"></input>
                                <input name="scan" type="submit" class="btn" value="scanwifi"></input>
                                <input name="shell_gui" type="submit" class="btn" value="cli Web Gui"></input>
                        </div>
                </div>
        </form>
EOF
}

tinypoxy_firewall(){
uci add firewall redirect
uci set firewall.@redirect[0].name='Transparent Proxy Redirect'
uci set firewall.@redirect[0].src=lan
uci set firewall.@redirect[0].proto=tcp
uci set firewall.@redirect[0].dest_port=8888
uci set firewall.@redirect[0].src_dport=80
uci set firewall.@redirect[0].src_dip='!192.168.1.1'
uci set firewall.@redirect[0].dest_ip=192.168.1.1
uci commit firewall
/etc/init.d/firewall restart
uci set tinyproxy.@tinyproxy[0].enabled=1
uci commit
/etc/init.d/tinyproxy enable
/etc/init.d/tinyproxy restart
}
